# What else should you learn?

<div style="text-align:center;">
```{r, echo = F}
knitr::include_graphics("img/stairs.png")
```
</div>

Here's a list of things I think would be nice for you to invest some time in, in no particular order.

## Touch typing

One of the things I NEVER see discussed when talking "upskilling" is improving your typing speed.
According to a survey (which Iâ€™m sure is not statistically, nor scientifically sound, but still...)
by onlinetyping.org (which you can find
[here](https://onlinetyping.org/blog/average-typing-speed.php#office-workers), most back office
workers (who spend all day typing) have a typing speed of 20 to 30 wpm (words per minute).
According to this article by the
[Atlantic](https://www.theatlantic.com/technology/archive/2013/01/you-probably-write-a-novels-worth-of-email-every-year/266942/)
people write about 41638 words in email per year. You as programmers (yes, even if you're focused
on data, you're a programmer) very surely type twice or thrice this amount of words per year. But
let's stay with 41638 words per year. That would translate to almost 28 days of non stop typing at
a typing speed of 25 words per minute. Doubling to 50 wpm is actually quite easy, and reaching 70
is really doable. This could improve productivity, or better yet, make you go home earlier instead
of working until 19h00 every day because you type like a snail. 

You need to learn touch typing, meaning, typing without looking at your keyboard.

## Unix command line

The Unix philosophy emphasizes creating small, specialized programs that do one 
thing well. These programs, or "tools," can be combined in powerful ways to 
accomplish complex tasks. Learning to use these tools from the command line is a 
fundamental skill. Start by mastering the basics of file system navigation (`ls`, 
`cd`, `pwd`) and file manipulation (`mv`, `cp`, `rm`). Then, move on to powerful 
text processing tools like `grep` for searching, `sed` for editing, and `awk` for 
pattern scanning and processing. Understanding how to use pipes (`|`) to chain these
commands together is crucial. For example, you could use `grep` to find specific 
lines in a file and then pipe them to `wc` to count them. As you become more 
comfortable, you can explore modern alternatives to these classic tools, such as 
`ripgrep` as a faster `grep`, and `fzf` for fuzzy finding.

Check out: https://www.cs.toronto.edu/~maclean/csc209/unixtools.html
and enroll for free: https://www.coursera.org/learn/unix
or get this book (try to find a used copy online for cheap): https://www.oreilly.com/library/view/unix-power-tools/0596003307/

## Vim

Yes, I think you should learn vim, or at the very least, your text editor of choice, by
heart. You should know every keyboard shortcut and every possibility that your text editor offers.
You should never touch the mouse when writing text. This is not just because of productivity, but
also for your health. Grabbing the mouse to click one or twice, and then go back to typing, then go
back to moving the mouse, etc, will destroy your shoulder. By keeping your hands on the keyboard at
all times and minimizing mouse usage, you may be able to grow old healthy. Vim helps with that
because it is a modal text editor (and most editors actually ship a
[Vim-mode](https://marketplace.visualstudio.com/items?itemName=vscodevim.vim)). 
Watch [this video](https://www.youtube.com/watch?v=-txKSRn0qeA) to get a quick introduction on 
Vim, and how to enable Vim mode in Vscode.

## Statistical modeling

Statistical modeling is crucial, and if you didn't major in stats, you very likely lack 
this knowledge. Here's a reading (and watching) list:

- [Regression and other stories](https://avehtari.github.io/ROS-Examples/) (has a [free PDF](https://users.aalto.fi/~ave/ROS.pdf))
- [Statistical Rethinking 2023 (on youtube)](https://www.youtube.com/playlist?list=PLDcUM9US4XdPz-KxHM4XHt7uUVGWWVSus)
- [Mostly harmless econometrics](https://press.princeton.edu/books/paperback/9780691120355/mostly-harmless-econometrics)
